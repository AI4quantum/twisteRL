name: Build and Deploy Documentation

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened, closed]
  workflow_dispatch:

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build-docs:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || github.event.action != 'closed'
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r docs/requirements.txt


    - name: Build documentation
      run: |
        cd docs
        # For PR builds, we'll fix paths after generation since html_baseurl doesn't work reliably
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "Building for PR preview"
          export PR_BUILD=true
        fi
        make html
      env:
        SPHINXOPTS: "--keep-going"

    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: docs/_build/html/

  deploy-docs:
    needs: build-docs
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
    - name: Setup Pages
      uses: actions/configure-pages@v3

    - name: Download documentation artifacts
      uses: actions/download-artifact@v4
      with:
        name: documentation
        path: ./docs

    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v2
      with:
        path: ./docs

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v2

  deploy-pr-preview:
    needs: build-docs
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action != 'closed'
    
    permissions:
      contents: write
      pull-requests: write
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Download documentation artifacts
      uses: actions/download-artifact@v4
      with:
        name: documentation
        path: ./pr-docs

    - name: Deploy PR Preview
      run: |
        # Configure git
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        
        # Check if gh-pages branch exists
        if git show-ref --verify --quiet refs/remotes/origin/gh-pages; then
          echo "gh-pages branch exists, checking it out"
          git fetch origin gh-pages:gh-pages
          git checkout gh-pages
        else
          echo "gh-pages branch doesn't exist, creating orphan branch"
          git checkout --orphan gh-pages
          git rm -rf . || true
          echo "# Documentation Previews" > README.md
          git add README.md
          git commit -m "Initialize gh-pages branch"
          git push origin gh-pages
        fi
        
        # Create PR preview directory
        PR_DIR="pr-${{ github.event.number }}"
        rm -rf "$PR_DIR"
        mkdir -p "$PR_DIR"
        
        # Copy built docs to PR directory
        echo "=== Copying docs from pr-docs to $PR_DIR ==="
        cp -r pr-docs/. "$PR_DIR/" || { echo "Failed to copy docs"; exit 1; }
        
        # Debug: Check what was actually built and copied
        echo "=== Files in pr-docs ==="
        find pr-docs -type f | head -20 || echo "No files in pr-docs"
        echo "=== Files in $PR_DIR ==="
        find "$PR_DIR" -type f | head -20 || echo "No files in $PR_DIR"
        echo "=== Check if static files exist ==="
        ls -la "$PR_DIR/_static/" | head -10 || echo "No _static directory"
        echo "=== Check if index.html exists ==="
        if [ -f "$PR_DIR/index.html" ]; then
          echo "index.html found, size: $(stat -f%z "$PR_DIR/index.html" 2>/dev/null || stat --format=%s "$PR_DIR/index.html" 2>/dev/null || echo 'unknown')"
        else
          echo "ERROR: index.html not found!"
          find "$PR_DIR" -name "*.html" | head -5
        fi
        echo "=== Sample HTML content BEFORE path fixing ==="
        head -30 "$PR_DIR/index.html" 2>/dev/null | grep -E "_static|css|js" || echo "No static references found or no index.html"
        
        # Setup variables
        REPO_NAME="${{ github.event.repository.name }}"
        PR_NUMBER="${{ github.event.number }}"
        BASE_PATH="/$REPO_NAME/pr-$PR_NUMBER"
        
        echo "=== Debug Info ==="
        echo "Repository name: $REPO_NAME"
        echo "PR number: $PR_NUMBER" 
        echo "Base path: $BASE_PATH"
        echo "GitHub context:"
        echo "  github.repository_owner: ${{ github.repository_owner }}"
        echo "  github.event.repository.name: ${{ github.event.repository.name }}"
        echo "  github.event.number: ${{ github.event.number }}"
        
        # Method 1: Fix paths using sed (existing approach)
        echo "=== Method 1: Fixing paths with sed ==="
        
        # First, let's see what patterns we need to match
        echo "Current patterns in HTML files:"
        grep -r "href.*_static\|src.*_static" "$PR_DIR" | head -5 || echo "No _static patterns found"
        
        find "$PR_DIR" -name "*.html" -type f -exec sed -i "s|href=\"_static/|href=\"$BASE_PATH/_static/|g" {} \;
        find "$PR_DIR" -name "*.html" -type f -exec sed -i "s|src=\"_static/|src=\"$BASE_PATH/_static/|g" {} \;
        find "$PR_DIR" -name "*.html" -type f -exec sed -i "s|href=\"_images/|href=\"$BASE_PATH/_images/|g" {} \;
        find "$PR_DIR" -name "*.html" -type f -exec sed -i "s|src=\"_images/|src=\"$BASE_PATH/_images/|g" {} \;
        find "$PR_DIR" -name "*.css" -type f -exec sed -i "s|url(_static/|url($BASE_PATH/_static/|g" {} \;
        find "$PR_DIR" -name "*.js" -type f -exec sed -i "s|\"_static/|\"$BASE_PATH/_static/|g" {} \;
        find "$PR_DIR" -name "*.js" -type f -exec sed -i "s|'_static/|'$BASE_PATH/_static/|g" {} \;
        
        echo "=== Method 2: Add HTML base tag as fallback ==="
        # Add base tag to all HTML files as a fallback
        BASE_URL="https://${{ github.repository_owner }}.github.io$BASE_PATH/"
        echo "Adding base tag with URL: $BASE_URL"
        
        if find "$PR_DIR" -name "*.html" -type f -exec grep -l "<head>" {} \; | head -1 > /dev/null; then
          find "$PR_DIR" -name "*.html" -type f -exec sed -i "s|<head>|<head>\n  <base href=\"$BASE_URL\">|" {} \;
          echo "Added base tags to HTML files"
        else
          echo "WARNING: No HTML files with <head> found"
        fi
        
        echo "=== Sample HTML content AFTER all fixes ==="
        if [ -f "$PR_DIR/index.html" ]; then
          head -30 "$PR_DIR/index.html" | grep -E "_static|css|js|<base" || echo "No static/base references found"
        else
          echo "No index.html found for verification"
        fi
        
        echo "=== Final verification ==="
        echo "Files in PR directory:"
        ls -la "$PR_DIR" | head -10
        echo "Static directory contents:"
        ls -la "$PR_DIR/_static/" | head -5 || echo "No _static directory"
        echo "Checking for remaining relative paths:"
        if find "$PR_DIR" -name "*.html" -type f > /dev/null 2>&1; then
          grep -r "href=\"_static\|src=\"_static" "$PR_DIR" | head -3 || echo "No relative _static paths found (good!)"
        else
          echo "No HTML files found for path verification"
        fi
        
        # Add and commit
        git add "$PR_DIR"
        git commit -m "Deploy PR #${{ github.event.number }} preview" || echo "No changes to commit"
        git push origin gh-pages
        
        echo "=== Post-deployment verification ==="
        echo "PR preview should be available at: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/pr-${{ github.event.number }}/"
        echo "Static files should be at: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/pr-${{ github.event.number }}/_static/"

    - name: Comment PR
      uses: actions/github-script@v7
      with:
        script: |
          const prNumber = context.issue.number;
          const previewUrl = `https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/pr-${prNumber}/`;
          
          // Find existing preview comment
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: prNumber,
          });
          
          const botComment = comments.data.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('ðŸ“– Documentation Preview')
          );
          
          const body = `ðŸ“– **Documentation Preview**
          
          The documentation for this PR is available (or will be shortly) at:
          ðŸ”— **${previewUrl}**
          
          This preview is automatically updated when you push changes to this PR.`;
          
          if (botComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: body
            });
          }

  cleanup-pr-preview:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    
    permissions:
      contents: write
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Cleanup PR Preview
      run: |
        # Configure git
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        
        # Check if gh-pages branch exists
        if ! git show-ref --verify --quiet refs/remotes/origin/gh-pages; then
          echo "gh-pages branch doesn't exist, nothing to clean up"
          exit 0
        fi
        
        # Checkout gh-pages branch
        git fetch origin gh-pages:gh-pages
        git checkout gh-pages
        
        # Remove PR preview directory
        PR_DIR="pr-${{ github.event.number }}"
        if [ -d "$PR_DIR" ]; then
          rm -rf "$PR_DIR"
          git add -A
          git commit -m "Remove PR #${{ github.event.number }} preview" || echo "No changes to commit"
          git push origin gh-pages
          echo "Cleaned up preview for PR #${{ github.event.number }}"
        else
          echo "No preview directory found for PR #${{ github.event.number }}"
        fi