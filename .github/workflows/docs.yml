name: Build and Deploy Documentation

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened, closed]
  workflow_dispatch:

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build-docs:
    runs-on: ubuntu-latest
    if: github.event.action != 'closed'
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r docs/requirements.txt


    - name: Build documentation
      run: |
        cd docs
        make html
      env:
        SPHINXOPTS: "--keep-going"

    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: docs/_build/html/

  deploy-docs:
    needs: build-docs
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
    - name: Setup Pages
      uses: actions/configure-pages@v3

    - name: Download documentation artifacts
      uses: actions/download-artifact@v4
      with:
        name: documentation
        path: ./docs

    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v2
      with:
        path: ./docs

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v2

  deploy-pr-preview:
    needs: build-docs
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action != 'closed'
    
    permissions:
      contents: write
      pull-requests: write
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Download documentation artifacts
      uses: actions/download-artifact@v4
      with:
        name: documentation
        path: ./pr-docs

    - name: Deploy PR Preview
      run: |
        # Configure git
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        
        # Check if gh-pages branch exists
        if git show-ref --verify --quiet refs/remotes/origin/gh-pages; then
          echo "gh-pages branch exists, checking it out"
          git fetch origin gh-pages:gh-pages
          git checkout gh-pages
        else
          echo "gh-pages branch doesn't exist, creating orphan branch"
          git checkout --orphan gh-pages
          git rm -rf . || true
          echo "# Documentation Previews" > README.md
          git add README.md
          git commit -m "Initialize gh-pages branch"
          git push origin gh-pages
        fi
        
        # Create PR preview directory
        PR_DIR="pr-${{ github.event.number }}"
        rm -rf "$PR_DIR"
        mkdir -p "$PR_DIR"
        
        # Copy built docs to PR directory (ensure all subdirs are copied)
        cp -r pr-docs/. "$PR_DIR/"
        # Ensure _static and _images directories exist
        if [ ! -d "$PR_DIR/_static" ]; then
          echo "ERROR: _static directory missing after copy!"
          echo "Contents of pr-docs:"
          ls -la pr-docs/
          echo "Contents of PR_DIR after copy:"
          ls -la "$PR_DIR/"
          exit 1
        fi
        
        # Debug: Show what we're working with
        echo "=== Debugging PR preview paths ==="
        echo "PR Directory: $PR_DIR"
        echo "Files in PR directory:"
        ls -la "$PR_DIR/"
        echo "Sample index.html head (first 20 lines):"
        head -20 "$PR_DIR/index.html" || echo "No index.html found"
        echo "Looking for _static references in HTML:"
        grep -n "_static/" "$PR_DIR/index.html" | head -5 || echo "No _static references found in HTML"
        
        # Fix relative paths for PR preview (handle query parameters too)
        echo "=== Fixing paths ==="
        find "$PR_DIR" -name "*.html" -type f -exec sed -i 's|href="_static/|href="/twisteRL/pr-${{ github.event.number }}/_static/|g' {} \;
        find "$PR_DIR" -name "*.html" -type f -exec sed -i 's|src="_static/|src="/twisteRL/pr-${{ github.event.number }}/_static/|g' {} \;
        find "$PR_DIR" -name "*.html" -type f -exec sed -i 's|url(_static/|url(/twisteRL/pr-${{ github.event.number }}/_static/|g' {} \;
        find "$PR_DIR" -name "*.css" -type f -exec sed -i 's|url(_static/|url(/twisteRL/pr-${{ github.event.number }}/_static/|g' {} \;
        # Also fix any remaining _static references (like in JavaScript)
        find "$PR_DIR" -name "*.js" -type f -exec sed -i 's|"_static/|"/twisteRL/pr-${{ github.event.number }}/_static/|g' {} \;
        find "$PR_DIR" -name "*.js" -type f -exec sed -i "s|'_static/|'/twisteRL/pr-${{ github.event.number }}/_static/|g" {} \;
        
        # Debug: Show results after fixing
        echo "=== After path fixing ==="
        echo "Sample index.html head after fixing:"
        head -20 "$PR_DIR/index.html" | grep -E "(css|js|_static)" || echo "No CSS/JS/static references found"
        echo "Directory structure:"
        find "$PR_DIR" -type d | head -10
        echo "Static files exist:"
        ls -la "$PR_DIR/_static/" | head -5 || echo "_static directory not found"
        
        # Add and commit
        git add "$PR_DIR"
        git commit -m "Deploy PR #${{ github.event.number }} preview" || echo "No changes to commit"
        git push origin gh-pages

    - name: Comment PR
      uses: actions/github-script@v7
      with:
        script: |
          const prNumber = context.issue.number;
          const previewUrl = `https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/pr-${prNumber}/`;
          
          // Find existing preview comment
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: prNumber,
          });
          
          const botComment = comments.data.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('ðŸ“– Documentation Preview')
          );
          
          const body = `ðŸ“– **Documentation Preview**
          
          The documentation for this PR is available (or will be shortly) at:
          ðŸ”— **${previewUrl}**
          
          This preview is automatically updated when you push changes to this PR.`;
          
          if (botComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: body
            });
          }

  cleanup-pr-preview:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    
    permissions:
      contents: write
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Cleanup PR Preview
      run: |
        # Configure git
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        
        # Check if gh-pages branch exists
        if ! git show-ref --verify --quiet refs/remotes/origin/gh-pages; then
          echo "gh-pages branch doesn't exist, nothing to clean up"
          exit 0
        fi
        
        # Checkout gh-pages branch
        git fetch origin gh-pages:gh-pages
        git checkout gh-pages
        
        # Remove PR preview directory
        PR_DIR="pr-${{ github.event.number }}"
        if [ -d "$PR_DIR" ]; then
          rm -rf "$PR_DIR"
          git add -A
          git commit -m "Remove PR #${{ github.event.number }} preview" || echo "No changes to commit"
          git push origin gh-pages
          echo "Cleaned up preview for PR #${{ github.event.number }}"
        else
          echo "No preview directory found for PR #${{ github.event.number }}"
        fi